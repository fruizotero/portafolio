// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using portafolio.backend.API.Contexto;

#nullable disable

namespace portafolio.backend.API.Contexto.Migraciones
{
    [DbContext(typeof(ContextoPortafolio))]
    [Migration("20250601083610_procedimientoAlmacenadoAnadirEmpleosIniciales")]
    partial class procedimientoAlmacenadoAnadirEmpleosIniciales
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConocimientoProyecto", b =>
                {
                    b.Property<int>("ConocimientosId")
                        .HasColumnType("int");

                    b.Property<int>("ProyectosId")
                        .HasColumnType("int");

                    b.HasKey("ConocimientosId", "ProyectosId");

                    b.HasIndex("ProyectosId");

                    b.ToTable("ConocimientoProyecto", (string)null);
                });

            modelBuilder.Entity("HabilidadProyecto", b =>
                {
                    b.Property<int>("HabilidadesId")
                        .HasColumnType("int");

                    b.Property<int>("ProyectosId")
                        .HasColumnType("int");

                    b.HasKey("HabilidadesId", "ProyectosId");

                    b.HasIndex("ProyectosId");

                    b.ToTable("HabilidadProyecto", (string)null);
                });

            modelBuilder.Entity("portafolio.backend.API.Dominio.Entidades.Conocimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioAdministradorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAdministradorId");

                    b.ToTable("Conocimientos");
                });

            modelBuilder.Entity("portafolio.backend.API.Dominio.Entidades.Educacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institucion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioAdministradorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAdministradorId");

                    b.ToTable("Educaciones");
                });

            modelBuilder.Entity("portafolio.backend.API.Dominio.Entidades.Empleo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Empresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioAdministradorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAdministradorId");

                    b.ToTable("Empleos");
                });

            modelBuilder.Entity("portafolio.backend.API.Dominio.Entidades.Habilidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EsActual")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioAdministradorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAdministradorId");

                    b.ToTable("Habilidades");
                });

            modelBuilder.Entity("portafolio.backend.API.Dominio.Entidades.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcercaDeMi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Saludo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioAdministradorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAdministradorId");

                    b.ToTable("Perfiles");
                });

            modelBuilder.Entity("portafolio.backend.API.Dominio.Entidades.Proyecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagenDesktopUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagenMobileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiveUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("RepositorioUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioAdministradorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAdministradorId");

                    b.ToTable("Proyectos");
                });

            modelBuilder.Entity("portafolio.backend.API.Dominio.Entidades.UsuarioAdministrador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsuariosAdministradores");
                });

            modelBuilder.Entity("ConocimientoProyecto", b =>
                {
                    b.HasOne("portafolio.backend.API.Dominio.Entidades.Conocimiento", null)
                        .WithMany()
                        .HasForeignKey("ConocimientosId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("portafolio.backend.API.Dominio.Entidades.Proyecto", null)
                        .WithMany()
                        .HasForeignKey("ProyectosId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HabilidadProyecto", b =>
                {
                    b.HasOne("portafolio.backend.API.Dominio.Entidades.Habilidad", null)
                        .WithMany()
                        .HasForeignKey("HabilidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("portafolio.backend.API.Dominio.Entidades.Proyecto", null)
                        .WithMany()
                        .HasForeignKey("ProyectosId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("portafolio.backend.API.Dominio.Entidades.Conocimiento", b =>
                {
                    b.HasOne("portafolio.backend.API.Dominio.Entidades.UsuarioAdministrador", "UsuarioAdministrador")
                        .WithMany()
                        .HasForeignKey("UsuarioAdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioAdministrador");
                });

            modelBuilder.Entity("portafolio.backend.API.Dominio.Entidades.Educacion", b =>
                {
                    b.HasOne("portafolio.backend.API.Dominio.Entidades.UsuarioAdministrador", "UsuarioAdministrador")
                        .WithMany()
                        .HasForeignKey("UsuarioAdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioAdministrador");
                });

            modelBuilder.Entity("portafolio.backend.API.Dominio.Entidades.Empleo", b =>
                {
                    b.HasOne("portafolio.backend.API.Dominio.Entidades.UsuarioAdministrador", "UsuarioAdministrador")
                        .WithMany()
                        .HasForeignKey("UsuarioAdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioAdministrador");
                });

            modelBuilder.Entity("portafolio.backend.API.Dominio.Entidades.Habilidad", b =>
                {
                    b.HasOne("portafolio.backend.API.Dominio.Entidades.UsuarioAdministrador", "UsuarioAdministrador")
                        .WithMany()
                        .HasForeignKey("UsuarioAdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioAdministrador");
                });

            modelBuilder.Entity("portafolio.backend.API.Dominio.Entidades.Perfil", b =>
                {
                    b.HasOne("portafolio.backend.API.Dominio.Entidades.UsuarioAdministrador", "UsuarioAdministrador")
                        .WithMany()
                        .HasForeignKey("UsuarioAdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioAdministrador");
                });

            modelBuilder.Entity("portafolio.backend.API.Dominio.Entidades.Proyecto", b =>
                {
                    b.HasOne("portafolio.backend.API.Dominio.Entidades.UsuarioAdministrador", "UsuarioAdministrador")
                        .WithMany()
                        .HasForeignKey("UsuarioAdministradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioAdministrador");
                });
#pragma warning restore 612, 618
        }
    }
}
